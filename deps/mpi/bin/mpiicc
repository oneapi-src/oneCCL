#!/bin/sh
#
# Copyright Intel Corporation.
# 
# This software and the related documents are Intel copyrighted materials, and
# your use of them is governed by the express license under which they were
# provided to you (License). Unless the License provides otherwise, you may
# not use, modify, copy, publish, distribute, disclose or transmit this
# software or the related documents without Intel's prior written permission.
# 
# This software and the related documents are provided as is, with no express
# or implied warranties, other than those that are expressly stated in the
# License.
#.
# (C) 2006 by Argonne National Laboratory.
# 
# 				  COPYRIGHT
# 
# The following is a notice of limited availability of the code, and disclaimer
# which must be included in the prologue of the code and in all source listings
# of the code.
# 
# Copyright Notice
#  + 2002 University of Chicago
# 
# Permission is hereby granted to use, reproduce, prepare derivative works, and
# to redistribute to others.  This software was authored by:
# 
# Mathematics and Computer Science Division
# Argonne National Laboratory, Argonne IL 60439
# 
# (and)
# 
# Department of Computer Science
# University of Illinois at Urbana-Champaign
# 
# 
# 			      GOVERNMENT LICENSE
# 
# Portions of this material resulted from work developed under a U.S.
# Government Contract and are subject to the following license: the Government
# is granted for itself and others acting on its behalf a paid-up, nonexclusive,
# irrevocable worldwide license in this computer software to reproduce, prepare
# derivative works, and perform publicly and display publicly.
# 
# 				  DISCLAIMER
# 
# This computer code material was prepared, in part, as an account of work
# sponsored by an agency of the United States Government.  Neither the United
# States, nor the University of Chicago, nor any of their employees, makes any
# warranty express or implied, or assumes any legal liability or responsibility
# for the accuracy, completeness, or usefulness of any information, apparatus,
# product, or process disclosed, or represents that its use would not infringe
# privately owned rights.
#
#     
#
# mpicc
# Simple script to compile and/or link MPI programs.
# This script knows the default flags and libraries, and can handle
# alternative C compilers and the associated flags and libraries.
# The important terms are:
#    includedir, libdir - Directories containing an *installed* mpich2
#    prefix, execprefix - Often used to define includedir and libdir
#    CC                 - C compiler
#    WRAPPER_CFLAGS        - Any special flags needed to compile
#    WRAPPER_LDFLAGS       - Any special flags needed to link
#    MPILIBNAME         - Name of the MPI library
#    MPI_OTHERLIBS      - Other libraries needed in order to link
#
# We assume that (a) the C compiler can both compile and link programs
#
# Handling of command-line options:
#   This is a little tricky because some options may contain blanks.
#
# Special issues with shared libraries - todo
#
# --------------------------------------------------------------------------

# Set the default values of all variables.
#
# Directory locations: Fixed for any MPI implementation.
# Set from the directory arguments to configure (e.g., --prefix=/usr/local)
prefix=../_install
# The environment variable I_MPI_ROOT may be used to override installation folder path
if [ -n "${I_MPI_ROOT}" ] ; then
    prefix="${I_MPI_ROOT}";
fi

PLATFORM=""
sysconfdir=${prefix}/etc
# The environment variable I_MPI_COMPILER_CONFIG_DIR may be used to override
# folder where *.conf files are placed
if [ -n "$I_MPI_COMPILER_CONFIG_DIR" ] ; then
    sysconfdir=$I_MPI_COMPILER_CONFIG_DIR;
fi
includedir=${prefix}/include
libdir=${prefix}/lib
#
# Default settings for compiler, flags, and libraries.
# Determined by a combination of environment variables and tests within
# configure (e.g., determining whehter -lsocket is needee)
CC="icc"
CFLAGS=""
LDFLAGS="-ldl"
MPILIBNAME="mpi"

# MPIVERSION is the version of the MPICH2 library that mpicc is intended for
MPIVERSION="2021.4"
#
# Internal variables
# Show is set to echo to cause the compilation command to be echoed instead
# of executed.
Show=
static_mpi=no
strip_debug_info=
handle_executable=
executable=a.out
ilp64=no
no_rpath=no
#
# End of initialization of variables
#---------------------------------------------------------------------
# Environment Variables.
# The environment variables I_MPI_CC, MPICH_CC may be used to override the
# default choices. I_MPI_CC has higher priority than MPICH_CC.
# In addition, if there is a file $sysconfdir/mpicc-$CCname.conf,
# where CCname is the name of the compiler with all spaces replaced by hyphens
# (e.g., "cc -64" becomes "cc--64", that file is sources, allowing other
# changes to the compilation environment.  See the variables used by the
# script (defined above)
if [ -n "$I_MPI_CC" ] ; then
    CC="$I_MPI_CC"
    CCname=$(echo "$CC" | sed 's/ /-/g')
    if [ -s $sysconfdir/mpicc-$(basename $CCname).conf ] ; then
        . $sysconfdir/mpicc-$(basename $CCname).conf
    fi
else
    if [ -n "$MPICH_CC" ] ; then
        CC="$MPICH_CC"
        CCname=$(echo $CC | sed 's/ /-/g')
        if [ -s $sysconfdir/mpicc-$(basename $CCname).conf ] ; then
            . $sysconfdir/mpicc-$(basename $CCname).conf
        fi
    fi
fi
if [ -n "$I_MPI_DEBUG_INFO_STRIP" ] ; then
    for comp_val in "0" "off" "no" "disable"
    do
        if [ "$I_MPI_DEBUG_INFO_STRIP" = "$comp_val" ] ; then
            strip_debug_info=no
            break
        fi
    done
fi
# Allow a profiling option to be selected through an environment variable
if [ -n "$MPICC_PROFILE" ] ; then
    profConf=$MPICC_PROFILE
fi
if [ -n "$I_MPI_CC_PROFILE" ] ; then
    profConf=$I_MPI_CC_PROFILE
fi

# Override default mpi library
if [ -n "$I_MPI_LINK" ] ; then
    mpilib_override=$I_MPI_LINK
fi

#
# ------------------------------------------------------------------------
# Argument processing.
# This is somewhat awkward because of the handling of arguments within
# the shell.  We want to handle arguments that include spaces without
# loosing the spacing (an alternative would be to use a more powerful
# scripting language that would allow us to retain the array of values,
# which the basic (rather than enhanced) Bourne shell does not.
#
# Look through the arguments for arguments that indicate compile only.
# If these are *not* found, add the library options

linking=yes
allargs=""
for arg in "$@" ; do
    # Set addarg to no if this arg should be ignored by the C compiler
    addarg=yes
    qarg=$arg
    if [ "x$handle_executable" = "xyes" ] ; then
        executable=$arg
        handle_executable=
    fi
    case "$arg" in
    # ----------------------------------------------------------------
    # Compiler options that affect whether we are linking or no
    -c|-S|-E|-M|-MM)
    # The compiler links by default
        linking=no
        ;;
    -o )
        handle_executable=yes
        addarg=yes
        ;;
    # ----------------------------------------------------------------
    # Options that control how we use mpicc (e.g., -show,
    # -cc=* -config=*
    -echo)
        addarg=no
        set -x
        ;;
    -cc=*)
        CC=$(echo A$arg | sed -e 's/A-cc=//g')
        addarg=no
        ;;
    -show)
        addarg=no
        Show=echo
        ;;
    -show_env)
        show_env=yes
        ;;
    -config=*)
        addarg=no
        CCname=$(echo A$arg | sed -e 's/A-config=//g')
        if [ -s "$sysconfdir/mpicc-$CCname.conf" ] ; then
            . "$sysconfdir/mpicc-$CCname.conf"
        else
            echo "Configuration file mpicc-$CCname.conf not found"
        fi
        ;;
    -compile-info|-compile_info)
        # -compile_info included for backward compatibility
        Show=echo
        addarg=no
        ;;
    -link-info|-link_info)
        # -link_info included for backward compatibility
        Show=echo
        addarg=no
        ;;
    -v)
        # Pass this argument to the compiler as well.
        echo "$(basename $0) for the Intel(R) MPI Library $MPIVERSION for Linux*"
        echo "Copyright Intel Corporation."
        # if there is only 1 argument, it must be -v.
        if [ "$#" -eq "1" ] ; then
            linking=no
        fi
        ;;
    -V)
        # Pass this argument to the compiler to query the compiler version.
        if [ "$#" -eq "1" ] ; then
            linking=no
        fi
        ;;
    -profile=*)
        # Pass the name of a profiling configuration.  As
        # a special case, lib<name>.so or lib<name>.la may be used
        # if the library is in $libdir
        # Loading the profConf file is handled below
        profConf=$(echo A$arg | sed -e 's/A-profile=//g')
        addarg=no
        ;;
    -help)
        # Print mini-help if started without parameters
        echo "Simple script to compile and/or link MPI programs."
        echo "Usage: $(basename $0) [options] <files>"
        echo "----------------------------------------------------------------------------"
        echo "The following options are supported:"
        echo "   -cc=<name>      specify a C compiler name: i.e. -cc=icc"
        echo "   -echo           print the scripts during their execution"
        echo "   -show           show command lines without real calling"
        echo "   -show_env       show environment variables"
        echo "   -config=<name>  specify a configuration file: i.e. -config=icc for mpicc-icc.conf file"
        echo "   -v              print version info of $(basename $0) and its native compiler"
        echo "   -profile=<name> specify a profile configuration file (an MPI profiling"
        echo "                   library): i.e. -profile=myprofile for the myprofile.cfg file."
        echo "                   As a special case, lib<name>.so or lib<name>.a may be used"
        echo "                   if the library is found"
        echo "   -check_mpi      link against the Intel(R) Trace Collector (-profile=vtmc)."
        echo "   -static_mpi     link the Intel(R) MPI Library statically"
        echo "   -mt_mpi         link the thread safe version of the Intel(R) MPI Library"
        echo "   -ilp64          link the ILP64 support of the Intel(R) MPI Library"
        echo "   -t or -trace"
        echo "                   link against the Intel(R) Trace Collector"
        echo "   -trace-imbalance"
        echo "                   link against the Intel(R) Trace Collector imbalance library"
        echo "                   (-profile=vtim)"
        echo "   -dynamic_log    link against the Intel(R) Trace Collector dynamically"
        echo "   -static         use static linkage method"
        echo "   -nostrip        turn off the debug information stripping during static linking"
        echo "   -fast           the same as -static_mpi + pass -fast option to a compiler"
        echo "   -O              enable optimization"
        echo "   -link_mpi=<name>"
        echo "                   link against the specified version of the Intel(R) MPI Library"
        echo "                   i.e -link_mpi=opt|opt_mt|dbg|dbg_mt"
        echo "   -norpath        disable rpath for compiler wrapper of the Intel(R) MPI Library"
        echo "All other options will be passed to the compiler without changing."
        echo "----------------------------------------------------------------------------"
        echo "The following environment variables are used:"
        echo "   I_MPI_ROOT      the Intel(R) MPI Library installation directory path"
        echo "   I_MPI_CC or MPICH_CC"
        echo "                   the path/name of the underlying compiler to be used"
        echo "   I_MPI_CC_PROFILE or MPICC_PROFILE"
        echo "                   the name of profile file (without extension)"
        echo "   I_MPI_COMPILER_CONFIG_DIR"
        echo "                   the folder which contains configuration files *.conf"
        echo "   I_MPI_TRACE_PROFILE"
        echo "                   specify a default profile for the -trace option"
        echo "   I_MPI_CHECK_PROFILE"
        echo "                   specify a default profile for the -check_mpi option"
        echo "   I_MPI_LINK      specify the version of the Intel(R) MPI Library"
        echo "   I_MPI_DEBUG_INFO_STRIP"
        echo "                   turn on/off the debug information stripping during static linking"
        echo "----------------------------------------------------------------------------"
        exit 0
        ;;
    -nolinkage)
        # This internal option is used by wrapper driver scripts mpicc, mpicxx, mpifc when -v option is used.
        linking=no
        addarg=no
        ;;
    -g)
        MPILIBDIR="/release"
        ;;
    -static_mpi)
        static_mpi=yes
        CFLAGS="$CFLAGS -Xlinker --export-dynamic"
        addarg=no
        ;;
    -static)
        static_mpi=yes
        CFLAGS="$CFLAGS -Xlinker --export-dynamic"
        addarg=yes
        ;;
    -mt_mpi)
        addarg=no
        ;;
    -ilp64)
        ilp64=yes
        addarg=no
        ;;
    -check_mpi)
        if [ -z "$profConf" ]; then
            if [ -z "$I_MPI_CHECK_PROFILE" ]; then
                profConf="vtmc"
            else
                profConf="$I_MPI_CHECK_PROFILE"
            fi
        else
            echo "Warning: the -check_mpi option will be ignored because the profile was set."
        fi
        addarg=no
        ;;
    -trace-imbalance)
        if [ -z "$profConf" ]; then
            profConf="vtim"
        else
            echo "Warning: the -trace-imbalance option will be ignored because the profile was set."
        fi
        addarg=no
        ;;
    -t | -trace | -t=* | -trace=* )
        if [ -z "$profConf" ]; then
            if [ -z "$I_MPI_TRACE_PROFILE" ]; then
                profConf="vt"
            else
                profConf="$I_MPI_TRACE_PROFILE"
            fi
        else
            echo "Warning: the -trace option will be ignored because the profile was set."
        fi
        # Disable strip to prevent debug symbols into separate dbg file in case of static linking IMPI-1493
        strip_debug_info=no
        addarg=no
        ;;
    -fast)
        echo "Warning: the -fast option forces static linkage method for the Intel(R) MPI Library."
        static_mpi=yes
        CFLAGS="$CFLAGS -Xlinker --export-dynamic"
        ;;
    -link_mpi=* )
        mpilib_override=`echo A$arg | sed -e 's/A-link_mpi=//g'`
        addarg=no
        ;;
    -nostrip )
        strip_debug_info=no
        addarg=no
        ;;
    -norpath )
        no_rpath=yes
        addarg=no
        ;;
    # Other arguments.  We are careful to handle arguments with
    # quotes (we try to quote all arguments in case they include
    # any spaces)
    *\"*)
        qarg="'$arg'"
        ;;
    *\'*)
        qarg=$(echo \"$arg\")
        ;;
    *)
        qarg="'$arg'"
        ;;
    esac
    if [ $addarg = yes ] ; then
        allargs="$allargs $qarg"
    fi
done

if [ $# -eq 0 ] ; then
    echo "Error: Command line argument is needed!"
    "$0" -help
    exit 1
fi

if [ -n "$mpilib_override" ] ; then
    case "$mpilib_override" in
    opt ) 
        MPILIBDIR="/release"
        ;;
    opt_mt )
        MPILIBDIR="/release"
        MPILIBDIR_MT="mt"
        ;;
    dbg )
        MPILIBDIR="/debug"
        ;;
    dbg_mt )
        MPILIBDIR="/debug"
        MPILIBDIR_MT="mt"
        ;;
    * )
        echo "Warning: incorrect library version specified. Automatically selected library will be used."
        ;;
    esac
fi

# -----------------------------------------------------------------------
case "$MPILIBDIR" in
    release | /release | debug | /debug)
        if [ -n "$MPILIBDIR_MT" ]; then
            MPILIBDIR=${MPILIBDIR}_${MPILIBDIR_MT}
        fi
        ;;
    "" )
        MPILIBDIR="/release"
        ;;
esac
if [ "$static_mpi" = yes ] ; then
    mpilibs="${libdir}/libmpifort.a ${libdir}${MPILIBDIR}/lib${MPILIBNAME}.a"
    I_MPI_OTHERLIBS=""
    MPI_OTHERLIBS=" -lrt -lpthread "
    if [ "$ilp64" = yes ]; then
        mpilibs="$libdir/libmpi_ilp64.a $mpilibs"
    fi
    if [ "x$strip_debug_info" = "x" ] ; then
        strip_debug_info=yes
    fi
else
    mpilibs="-lmpifort -l$MPILIBNAME"
    I_MPI_OTHERLIBS=""
    MPI_OTHERLIBS=" -lrt -lpthread "
    if [ "$ilp64" = yes ]; then
        mpilibs="-lmpi_ilp64 $mpilibs"
    fi
fi
# Derived variables.  These are assembled from variables set from the
# default, environment, configuration file (if any) and command-line
# options (if any)

#
# Handle the case of a profile switch
if [ -n "$profConf" ] ; then
    profConffile=
    if [ -s "$libdir/lib$profConf.a" ] || [ -s "$libdir/lib$profConf.so" ] ; then
        mpilibs="-l$profConf $mpilibs"
    elif [ -s "$sysconfdir/$profConf.conf" ] ; then
        profConffile="$sysconfdir/$profConf.conf"
    elif [ -s "$profConf.conf" ] ; then
        profConffile="$profConf.conf"
    else
        echo "Profiling configuration file $profConf.conf not found in $sysconfdir"
    fi
    if [ -n "$profConffile" ] && [ -s "$profConffile" ] ; then
        . $profConffile
        if [ -n "$PROFILE_INCPATHS" ] ; then
            CFLAGS="$PROFILE_INCPATHS $CFLAGS"
            fi
            if [ -n "$PROFILE_PRELIB" ] ; then
                mpilibs="$PROFILE_PRELIB $mpilibs"
            fi
            if [ -n "$PROFILE_POSTLIB" ] ; then
                mpilibs="$mpilibs $PROFILE_POSTLIB"
            fi
        fi
fi

# -----------------------------------------------------------------------
#
# A temporary statement to invoke the compiler
# Place the -L before any args incase there are any mpi libraries in there.
# Eventually, we'll want to move this after any non-MPI implementation
# libraries.
# We use a single invocation of the compiler.  This will be adequate until
# we run into a system that uses a separate linking command.  With any luck,
# such archaic systems are no longer with us.  This also lets us
# accept any argument; we don't need to know if we've seen a source
# file or an object file.  Instead, we just check for an option that
# suppressing linking, such as -c or -M.

if [ "${show_env}" = "yes" ]; then
    env | more
    exit 0
fi

if [ "$no_rpath" = "yes" ]; then
    rpath_opt="-Xlinker --enable-new-dtags"
else
    rpath_opt="-Xlinker --enable-new-dtags -Xlinker -rpath -Xlinker \"${libdir}${MPILIBDIR}\" -Xlinker -rpath -Xlinker \"${libdir}\""
fi
if [ "$linking" = yes ] ; then
    cmd_line="$CC $CFLAGS $allargs -I\"${includedir}\" -L\"${libdir}${MPILIBDIR}\" -L\"${libdir}\" $rpath_opt $mpilibs $I_MPI_OTHERLIBS $LDFLAGS $MPI_OTHERLIBS"
    if [ "$Show" = echo ] ; then
        echo $cmd_line
    else
        eval $(echo $cmd_line)
    fi
    rc=$?
    if [ $rc -eq 0 ] && [ "x$strip_debug_info" = "xyes" ] ; then
        $Show objcopy --only-keep-debug ${executable} ${executable}.dbg
        $Show objcopy --strip-debug ${executable}
        $Show objcopy --add-gnu-debuglink=${executable}.dbg ${executable}
    fi
else
    cmd_line="$CC $CFLAGS $allargs -I\"${includedir}\""
    if [ "$Show" = echo ] ; then
        echo "$cmd_line"
    else
        eval $(echo $cmd_line)
    fi
    rc=$?
fi

exit $rc
