<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceccl_1_1v1" kind="namespace" language="C++">
    <compoundname>ccl::v1</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__init_1ga65f74f344efb9fa2ee3d2c640a60cecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>attr_val_type</declname>
            <defname>attr_val_type</defname>
          </param>
        </templateparamlist>
        <type>init_attr CCL_API</type>
        <definition>init_attr CCL_API ccl::v1::create_init_attr</definition>
        <argsstring>(attr_val_type &amp;&amp;... avs)</argsstring>
        <name>create_init_attr</name>
        <param>
          <type>attr_val_type &amp;&amp;...</type>
          <declname>avs</declname>
        </param>
        <briefdescription>
<para>Creates an attribute object that may be used to control the init operation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an attribute object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="24" column="19" bodyfile="include/oneapi/ccl/api_functions.hpp" bodystart="24" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="group__init_1ga20c74d17bf3eb875364fc51724bf2c1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void CCL_API</type>
        <definition>void CCL_API ccl::v1::init</definition>
        <argsstring>(const init_attr &amp;attr=default_init_attr)</argsstring>
        <name>init</name>
        <param>
          <type>const init_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_init_attr</defval>
        </param>
        <briefdescription>
<para>Initializes the library. Optional for invocation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional init attributes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="33" column="14" declfile="include/oneapi/ccl/api_functions.hpp" declline="33" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__init_1ga546f0ab65c4a49793a05f7ece8e9ec66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>library_version CCL_API</type>
        <definition>library_version CCL_API ccl::v1::get_library_version</definition>
        <argsstring>()</argsstring>
        <name>get_library_version</name>
        <briefdescription>
<para>Retrieves the library version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="39" column="25" declfile="include/oneapi/ccl/api_functions.hpp" declline="39" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__datatype_1ga6784240ba89cee510308bc9005839ef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>attr_val_type</declname>
            <defname>attr_val_type</defname>
          </param>
        </templateparamlist>
        <type>datatype_attr CCL_API</type>
        <definition>datatype_attr CCL_API ccl::v1::create_datatype_attr</definition>
        <argsstring>(attr_val_type &amp;&amp;... avs)</argsstring>
        <name>create_datatype_attr</name>
        <param>
          <type>attr_val_type &amp;&amp;...</type>
          <declname>avs</declname>
        </param>
        <briefdescription>
<para>Creates an attribute object that may be used to register custom datatype. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an attribute object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="54" column="23" bodyfile="include/oneapi/ccl/api_functions.hpp" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="group__datatype_1ga45485e2a2c64be2b69165ffc88ba5f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>datatype CCL_API</type>
        <definition>datatype CCL_API ccl::v1::register_datatype</definition>
        <argsstring>(const datatype_attr &amp;attr)</argsstring>
        <name>register_datatype</name>
        <param>
          <type>const datatype_attr &amp;</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
<para>Registers custom datatype to be used in communication operations. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>datatype attributes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datatype handle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="64" column="18" declfile="include/oneapi/ccl/api_functions.hpp" declline="64" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__datatype_1gae6c1e8c538688900d059ca0bb4acec2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void CCL_API</type>
        <definition>void CCL_API ccl::v1::deregister_datatype</definition>
        <argsstring>(datatype dtype)</argsstring>
        <name>deregister_datatype</name>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
<para>Deregisters custom datatype. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>custom datatype handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="71" column="14" declfile="include/oneapi/ccl/api_functions.hpp" declline="71" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__datatype_1ga03444e139279793fcf6c41fe0f57faf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t CCL_API</type>
        <definition>size_t CCL_API ccl::v1::get_datatype_size</definition>
        <argsstring>(datatype dtype)</argsstring>
        <name>get_datatype_size</name>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
<para>Retrieves a datatype size in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>datatype handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datatype size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="79" column="16" declfile="include/oneapi/ccl/api_functions.hpp" declline="79" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__kvs_1ga4de814041fac95137c0747500cdc96d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>attr_val_type</declname>
            <defname>attr_val_type</defname>
          </param>
        </templateparamlist>
        <type>kvs_attr CCL_API</type>
        <definition>kvs_attr CCL_API ccl::v1::create_kvs_attr</definition>
        <argsstring>(attr_val_type &amp;&amp;... avs)</argsstring>
        <name>create_kvs_attr</name>
        <param>
          <type>attr_val_type &amp;&amp;...</type>
          <declname>avs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="92" column="18" bodyfile="include/oneapi/ccl/api_functions.hpp" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="group__kvs_1ga544ea9aa17bed25ff1ae8dc5d000d97c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>shared_ptr_class&lt; kvs &gt; CCL_API</type>
        <definition>shared_ptr_class&lt;kvs&gt; CCL_API ccl::v1::create_main_kvs</definition>
        <argsstring>(const kvs_attr &amp;attr=default_kvs_attr)</argsstring>
        <name>create_main_kvs</name>
        <param>
          <type>const kvs_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_kvs_attr</defval>
        </param>
        <briefdescription>
<para>Creates a main key-value store. Its address should be distributed using out of band communication mechanism and be used to create key-value stores on other processes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional kvs attributes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>kvs object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="104" column="26" declfile="include/oneapi/ccl/api_functions.hpp" declline="104" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="group__kvs_1ga3576460665ad4155bb27a565ed77cc4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>shared_ptr_class&lt; kvs &gt; CCL_API</type>
        <definition>shared_ptr_class&lt;kvs&gt; CCL_API ccl::v1::create_kvs</definition>
        <argsstring>(const kvs::address_type &amp;addr, const kvs_attr &amp;attr=default_kvs_attr)</argsstring>
        <name>create_kvs</name>
        <param>
          <type>const kvs::address_type &amp;</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>const kvs_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_kvs_attr</defval>
        </param>
        <briefdescription>
<para>Creates a new key-value store from main kvs address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>address of main kvs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional kvs attributes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>kvs object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="113" column="26" declfile="include/oneapi/ccl/api_functions.hpp" declline="113" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="group__device_1ga75b09ccea645fb56d99344e3acca3977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class native_device_type</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_device_supported&lt;native_device_type&gt;()&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>device CCL_API</type>
        <definition>device CCL_API ccl::v1::create_device</definition>
        <argsstring>(native_device_type &amp;&amp;native_device)</argsstring>
        <name>create_device</name>
        <param>
          <type>native_device_type &amp;&amp;</type>
          <declname>native_device</declname>
        </param>
        <briefdescription>
<para>Creates a new device from @native_device_type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>native_device</parametername>
</parameternamelist>
<parameterdescription>
<para>the existing handle of device </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>device object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="131" column="16" bodyfile="include/oneapi/ccl/api_functions.hpp" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="group__device_1gade5f440ce61b5449d0e90c37c43aa671" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>device CCL_API</type>
        <definition>device CCL_API ccl::v1::create_device</definition>
        <argsstring>()</argsstring>
        <name>create_device</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="139" column="16" declfile="include/oneapi/ccl/api_functions.hpp" declline="139" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__context_1gad6daf5ee10bf8c16617188ca4c960ebe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class native_context_type</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_context_supported&lt;native_context_type&gt;()&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>context CCL_API</type>
        <definition>context CCL_API ccl::v1::create_context</definition>
        <argsstring>(native_context_type &amp;&amp;native_context)</argsstring>
        <name>create_context</name>
        <param>
          <type>native_context_type &amp;&amp;</type>
          <declname>native_context</declname>
        </param>
        <briefdescription>
<para>Creates a new context from @native_contex_type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>native_context</parametername>
</parameternamelist>
<parameterdescription>
<para>the existing handle of context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>context object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="156" column="17" bodyfile="include/oneapi/ccl/api_functions.hpp" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="group__context_1ga632ba2b0ff7402f2555d4485bc33add1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>context CCL_API</type>
        <definition>context CCL_API ccl::v1::create_context</definition>
        <argsstring>()</argsstring>
        <name>create_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="164" column="17" declfile="include/oneapi/ccl/api_functions.hpp" declline="164" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__event_1ga8630b9a1e9f3a7e6d053090d2ff0be41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class event_type</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_event_supported&lt;event_type&gt;()&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::create_event</definition>
        <argsstring>(event_type &amp;native_event)</argsstring>
        <name>create_event</name>
        <param>
          <type>event_type &amp;</type>
          <declname>native_event</declname>
        </param>
        <briefdescription>
<para>Creates a new event from @native_event_type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>native_event</parametername>
</parameternamelist>
<parameterdescription>
<para>the existing event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>event object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="180" column="15" bodyfile="include/oneapi/ccl/api_functions.hpp" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="group__stream_1ga97f803e6a4980c5d704d32ba106ab0c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class native_stream_type</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_stream_supported&lt;native_stream_type&gt;()&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>stream CCL_API</type>
        <definition>stream CCL_API ccl::v1::create_stream</definition>
        <argsstring>(native_stream_type &amp;native_stream)</argsstring>
        <name>create_stream</name>
        <param>
          <type>native_stream_type &amp;</type>
          <declname>native_stream</declname>
        </param>
        <briefdescription>
<para>Creates a new stream from @native_stream_type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>native_stream</parametername>
</parameternamelist>
<parameterdescription>
<para>the existing handle of stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>stream object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="199" column="16" bodyfile="include/oneapi/ccl/api_functions.hpp" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="group__stream_1ga8338a8cea91a0ad49efa6e445804daf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stream CCL_API</type>
        <definition>stream CCL_API ccl::v1::create_stream</definition>
        <argsstring>()</argsstring>
        <name>create_stream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="206" column="16" declfile="include/oneapi/ccl/api_functions.hpp" declline="206" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__communicator_1ga7a82fb41f5a88621d5e5774a3aa0f891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>attr_val_type</declname>
            <defname>attr_val_type</defname>
          </param>
        </templateparamlist>
        <type>comm_attr CCL_API</type>
        <definition>comm_attr CCL_API ccl::v1::create_comm_attr</definition>
        <argsstring>(attr_val_type &amp;&amp;... avs)</argsstring>
        <name>create_comm_attr</name>
        <param>
          <type>attr_val_type &amp;&amp;...</type>
          <declname>avs</declname>
        </param>
        <briefdescription>
<para>Creates an attribute object that may be used to control the create_communicator operation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an attribute object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="221" column="19" bodyfile="include/oneapi/ccl/api_functions.hpp" bodystart="221" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="group__communicator_1ga7b539d7c673c484421bd2c8a6b09e24d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DeviceType</type>
          </param>
          <param>
            <type>class ContextType</type>
          </param>
        </templateparamlist>
        <type>vector_class&lt; communicator &gt; CCL_API</type>
        <definition>vector_class&lt;communicator&gt; CCL_API ccl::v1::create_communicators</definition>
        <argsstring>(int size, const vector_class&lt; pair_class&lt; int, DeviceType &gt;&gt; &amp;devices, const ContextType &amp;context, shared_ptr_class&lt; kvs_interface &gt; kvs, const comm_attr &amp;attr=default_comm_attr)</argsstring>
        <name>create_communicators</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const vector_class&lt; pair_class&lt; int, DeviceType &gt;&gt; &amp;</type>
          <declname>devices</declname>
        </param>
        <param>
          <type>const ContextType &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>shared_ptr_class&lt; kvs_interface &gt;</type>
          <declname>kvs</declname>
        </param>
        <param>
          <type>const comm_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_comm_attr</defval>
        </param>
        <briefdescription>
<para>Creates new communicators with user supplied size, ranks, local device-rank mapping and kvs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>user-supplied total number of ranks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rank</parametername>
</parameternamelist>
<parameterdescription>
<para>user-supplied rank </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>local device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>devices</parametername>
</parameternamelist>
<parameterdescription>
<para>user-supplied mapping of local ranks on devices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>context containing the devices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kvs</parametername>
</parameternamelist>
<parameterdescription>
<para>key-value store for ranks wire-up </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional communicator attributes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vector of communicators / communicator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="257" column="1" bodyfile="include/oneapi/ccl/api_functions.hpp" bodystart="257" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="group__communicator_1gadf690d23b1efac6e1d754ba584e75b16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DeviceType</type>
          </param>
          <param>
            <type>class ContextType</type>
          </param>
        </templateparamlist>
        <type>vector_class&lt; communicator &gt; CCL_API</type>
        <definition>vector_class&lt;communicator&gt; CCL_API ccl::v1::create_communicators</definition>
        <argsstring>(int size, const map_class&lt; int, DeviceType &gt; &amp;devices, const ContextType &amp;context, shared_ptr_class&lt; kvs_interface &gt; kvs, const comm_attr &amp;attr=default_comm_attr)</argsstring>
        <name>create_communicators</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const map_class&lt; int, DeviceType &gt; &amp;</type>
          <declname>devices</declname>
        </param>
        <param>
          <type>const ContextType &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>shared_ptr_class&lt; kvs_interface &gt;</type>
          <declname>kvs</declname>
        </param>
        <param>
          <type>const comm_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_comm_attr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="270" column="22" bodyfile="include/oneapi/ccl/api_functions.hpp" bodystart="270" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="group__communicator_1ga16500e747517c4f9320026eebf18a210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DeviceType</type>
          </param>
          <param>
            <type>class ContextType</type>
          </param>
        </templateparamlist>
        <type>communicator CCL_API</type>
        <definition>communicator CCL_API ccl::v1::create_communicator</definition>
        <argsstring>(int size, int rank, DeviceType &amp;device, const ContextType &amp;context, shared_ptr_class&lt; kvs_interface &gt; kvs, const comm_attr &amp;attr=default_comm_attr)</argsstring>
        <name>create_communicator</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>DeviceType &amp;</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const ContextType &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>shared_ptr_class&lt; kvs_interface &gt;</type>
          <declname>kvs</declname>
        </param>
        <param>
          <type>const comm_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_comm_attr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="283" column="22" bodyfile="include/oneapi/ccl/api_functions.hpp" bodystart="283" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="group__communicator_1gaebeff0c5e7fc7e0dd27fe6d27b466db9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>communicator CCL_API</type>
        <definition>communicator CCL_API ccl::v1::create_communicator</definition>
        <argsstring>(int size, int rank, shared_ptr_class&lt; kvs_interface &gt; kvs, const comm_attr &amp;attr=default_comm_attr)</argsstring>
        <name>create_communicator</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>shared_ptr_class&lt; kvs_interface &gt;</type>
          <declname>kvs</declname>
        </param>
        <param>
          <type>const comm_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_comm_attr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="306" column="22" declfile="include/oneapi/ccl/api_functions.hpp" declline="306" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="group___group_1ga793148ac2e6e7eb85d8b457238147c34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void CCL_API</type>
        <definition>void CCL_API ccl::v1::group_start</definition>
        <argsstring>()</argsstring>
        <name>group_start</name>
        <briefdescription>
<para><ref refid="group___group_1ga793148ac2e6e7eb85d8b457238147c34" kindref="member">group_start()</ref> initiates a group call of all ccl collective operations </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="380" column="14" declfile="include/oneapi/ccl/api_functions.hpp" declline="380" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group___group_1gaa08d35d8b24f79fd84b5ce825e5475cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void CCL_API</type>
        <definition>void CCL_API ccl::v1::group_end</definition>
        <argsstring>()</argsstring>
        <name>group_end</name>
        <briefdescription>
<para><ref refid="group___group_1gaa08d35d8b24f79fd84b5ce825e5475cd" kindref="member">group_end()</ref> finalize a group call of all submitted ccl collective operations </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="386" column="14" declfile="include/oneapi/ccl/api_functions.hpp" declline="386" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__operation_1ga0ad16acdce5d78b648801f91d7316907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class coll_attribute_type</type>
          </param>
          <param>
            <type>class...</type>
            <declname>attr_val_type</declname>
            <defname>attr_val_type</defname>
          </param>
        </templateparamlist>
        <type>coll_attribute_type CCL_API</type>
        <definition>coll_attribute_type CCL_API ccl::v1::create_operation_attr</definition>
        <argsstring>(attr_val_type &amp;&amp;... avs)</argsstring>
        <name>create_operation_attr</name>
        <param>
          <type>attr_val_type &amp;&amp;...</type>
          <declname>avs</declname>
        </param>
        <briefdescription>
<para>Creates an attribute object that may be used to customize communication operation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an attribute object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="401" column="29" bodyfile="include/oneapi/ccl/api_functions.hpp" bodystart="401" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1gadc867b06e814abffb0b7f724106b5c3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const void *send_buf, size_t send_count, void *recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, datatype dtype, const communicator &amp;comm, const stream &amp;stream, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Allgatherv is a collective communication operation that collects data from all the ranks within a communicator into a single buffer. Different ranks may contribute segments of different sizes. The resulting data in the output buffer is the same for each rank.</para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer with <computeroutput>send_count</computeroutput> elements of <computeroutput>dtype</computeroutput> that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>send_count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements of type <computeroutput>dtype</computeroutput> in <computeroutput>send_buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer to store gathered result of <computeroutput>dtype</computeroutput>, must be large enough to hold values from all ranks, i.e. size should be equal to <computeroutput>dtype</computeroutput> size in bytes * sum of all values in <computeroutput>recv_counts</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_counts</parametername>
</parameternamelist>
<parameterdescription>
<para>array with the number of elements of type <computeroutput>dtype</computeroutput> to be received from each rank </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the datatype of elements in <computeroutput>send_buf</computeroutput> and <computeroutput>recv_buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communicator for which the operation will be performed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>abstraction over a device queue constructed via ccl::create_stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional attributes to customize operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deps</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional vector of the events that the operation should depend on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ccl::event an object to track the progress of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="430" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="430" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1gab62b8e5c2ca4c20b7ae1b5a1cc526186" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const void *send_buf, size_t send_count, void *recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, datatype dtype, const communicator &amp;comm, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="443" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="443" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1ga49c8770a2f8057895a3bcdf9be9c15b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const void *send_buf, size_t send_count, const vector_class&lt; void * &gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, datatype dtype, const communicator &amp;comm, const stream &amp;stream, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>const vector_class&lt; void * &gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>This overloaded function takes separate receive buffer per rank.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store gathered result, one buffer per rank; each buffer must be large enough to keep the corresponding <computeroutput>recv_counts</computeroutput> elements of <computeroutput>dtype</computeroutput> size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="460" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="460" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1gad3da0ea3b7a6d9dde3b71318e09f4041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const void *send_buf, size_t send_count, const vector_class&lt; void * &gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, datatype dtype, const communicator &amp;comm, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>const vector_class&lt; void * &gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>This overloaded function takes separate receive buffer per rank.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store gathered result, one buffer per rank; each buffer must be large enough to keep the corresponding <computeroutput>recv_counts</computeroutput> elements of <computeroutput>dtype</computeroutput> size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="478" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="478" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1ga161e5ea2906c9377c74bc46d38c91546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const BufferType *send_buf, size_t send_count, BufferType *recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const stream &amp;stream, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer with <computeroutput>send_count</computeroutput> elements of <computeroutput>BufferType</computeroutput> that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer to store gathered result of <computeroutput>BufferType</computeroutput>, must be large enough to hold values from all ranks, i.e. size should be equal to <computeroutput>BufferType</computeroutput> size in bytes * sum of all values in <computeroutput>recv_counts</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="499" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="499" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1gabab76bb2e8d6e0223dfad7be25fb1f03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const BufferType *send_buf, size_t send_count, BufferType *recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer with <computeroutput>send_count</computeroutput> elements of <computeroutput>BufferType</computeroutput> that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer to store gathered result of <computeroutput>BufferType</computeroutput>, must be large enough to hold values from all ranks, i.e. size should be equal to <computeroutput>BufferType</computeroutput> size in bytes * sum of all values in <computeroutput>recv_counts</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="520" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="520" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1ga9c48e02cf5155fcb8eba48973ab8e0e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const BufferType *send_buf, size_t send_count, vector_class&lt; BufferType * &gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const stream &amp;stream, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>vector_class&lt; BufferType * &gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer with <computeroutput>send_count</computeroutput> elements of <computeroutput>BufferType</computeroutput> that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store gathered result, one buffer per rank; each buffer must be large enough to keep the corresponding <computeroutput>recv_counts</computeroutput> elements of <computeroutput>BufferType</computeroutput> size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="539" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="539" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1gaec28ac8b12dee4bedc4e1c06b6addc58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const BufferType *send_buf, size_t send_count, vector_class&lt; BufferType * &gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>vector_class&lt; BufferType * &gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer with <computeroutput>send_count</computeroutput> elements of <computeroutput>BufferType</computeroutput> that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store gathered result, one buffer per rank; each buffer must be large enough to keep the corresponding <computeroutput>recv_counts</computeroutput> elements of <computeroutput>BufferType</computeroutput> size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="559" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="559" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1gab64b8d34a738b402de32c0712551d1de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, size_t send_count, BufferObjectType &amp;recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const stream &amp;stream, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer of <computeroutput>BufferObjectType</computeroutput> with <computeroutput>send_count</computeroutput> elements that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer of <computeroutput>BufferObjectType</computeroutput> to store gathered result, must be large enough to hold values from all ranks, i.e. size should be equal to <computeroutput>BufferType</computeroutput> size in bytes * sum of all values in <computeroutput>recv_counts</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="579" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="579" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1ga20b9ece4ceccb4d05debcbcdf589536f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, size_t send_count, BufferObjectType &amp;recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer of <computeroutput>BufferObjectType</computeroutput> with <computeroutput>send_count</computeroutput> elements that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer of <computeroutput>BufferObjectType</computeroutput> to store gathered result, must be large enough to hold values from all ranks, i.e. size should be equal to <computeroutput>BufferType</computeroutput> size in bytes * sum of all values in <computeroutput>recv_counts</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="600" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="600" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1ga4a872d1d394952a6d64eb70cbf3b48fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, size_t send_count, vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const stream &amp;stream, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer of <computeroutput>BufferObjectType</computeroutput> with <computeroutput>send_count</computeroutput> elements that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store gathered result, one buffer per rank; each buffer must be large enough to keep the corresponding <computeroutput>recv_counts</computeroutput> elements of <computeroutput>BufferObjectType</computeroutput> size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="619" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="619" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1ga4ca37a5e3180060bd9421aef1bb9e57b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, size_t send_count, vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer of <computeroutput>BufferObjectType</computeroutput> with <computeroutput>send_count</computeroutput> elements that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store gathered result, one buffer per rank; each buffer must be large enough to keep the corresponding <computeroutput>recv_counts</computeroutput> elements of <computeroutput>BufferObjectType</computeroutput> size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="639" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="639" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allreduce_1ga576852f17997a2554d1730c4e468c121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allreduce</definition>
        <argsstring>(const void *send_buf, void *recv_buf, size_t count, datatype dtype, reduction rtype, const communicator &amp;comm, const stream &amp;stream, const allreduce_attr &amp;attr=default_allreduce_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allreduce</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const allreduce_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allreduce_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Allreduce is a collective communication operation that performs the global reduction operation on values from all ranks of communicator and distributes the result back to all ranks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer with <computeroutput>count</computeroutput> elements of <computeroutput>dtype</computeroutput> that stores local data to be reduced </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer to store reduced result, must have the same dimension as <computeroutput>send_buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements of type <computeroutput>dtype</computeroutput> in <computeroutput>send_buf</computeroutput> and <computeroutput>recv_buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the datatype of elements in <computeroutput>send_buf</computeroutput> and <computeroutput>recv_buf`</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the reduction operation to be applied </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communicator for which the operation will be performed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>abstraction over a device queue constructed via ccl::create_stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional attributes to customize operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deps</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional vector of the events that the operation should depend on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ccl::event an object to track the progress of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="667" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="667" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allreduce_1gad451e84105255b658854a943a70356f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allreduce</definition>
        <argsstring>(const void *send_buf, void *recv_buf, size_t count, datatype dtype, reduction rtype, const communicator &amp;comm, const allreduce_attr &amp;attr=default_allreduce_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allreduce</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const allreduce_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allreduce_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="680" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="680" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allreduce_1ga2a6bf4a6873e40a4b686e92d840eed77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allreduce</definition>
        <argsstring>(const BufferType *send_buf, BufferType *recv_buf, size_t count, reduction rtype, const communicator &amp;comm, const stream &amp;stream, const allreduce_attr &amp;attr=default_allreduce_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allreduce</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const allreduce_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allreduce_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="697" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="697" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allreduce_1ga4cd77897206c78fca1db280ed48cd030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allreduce</definition>
        <argsstring>(const BufferType *send_buf, BufferType *recv_buf, size_t count, reduction rtype, const communicator &amp;comm, const allreduce_attr &amp;attr=default_allreduce_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allreduce</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const allreduce_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allreduce_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="714" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="714" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allreduce_1ga27bf17e6ce3bda78d5d047c34e0725a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allreduce</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, BufferObjectType &amp;recv_buf, size_t count, reduction rtype, const communicator &amp;comm, const stream &amp;stream, const allreduce_attr &amp;attr=default_allreduce_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allreduce</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const allreduce_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allreduce_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="730" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="730" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allreduce_1ga8a2953b3cb14bb4733b0c51ea655ef7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allreduce</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, BufferObjectType &amp;recv_buf, size_t count, reduction rtype, const communicator &amp;comm, const allreduce_attr &amp;attr=default_allreduce_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allreduce</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const allreduce_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allreduce_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="747" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="747" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoall_1gacfb8820ddd761813a147f4d120674700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoall</definition>
        <argsstring>(const void *send_buf, void *recv_buf, size_t count, datatype dtype, const communicator &amp;comm, const stream &amp;stream, const alltoall_attr &amp;attr=default_alltoall_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoall</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const alltoall_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoall_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Alltoall is a collective communication operation in which each rank sends distinct equal-sized blocks of data to each rank. The j-th block of <computeroutput>send_buf</computeroutput> sent from the i-th rank is received by the j-th rank and is placed in the i-th block of <computeroutput>recvbuf</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer with <computeroutput>count</computeroutput> elements of <computeroutput>dtype</computeroutput> that stores local data to be sent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer to store received result, must be large enough to hold values from all ranks, i.e. at least <computeroutput>comm_size</computeroutput> * <computeroutput>count</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements of type <computeroutput>dtype</computeroutput> to be send to or to received from each rank </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the datatype of elements in <computeroutput>send_buf</computeroutput> and <computeroutput>recv_buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communicator for which the operation will be performed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>abstraction over a device queue constructed via ccl::create_stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional attributes to customize operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deps</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional vector of the events that the operation should depend on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ccl::event an object to track the progress of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="778" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="778" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoall_1ga762c02cd990abd73909fc06b779ee9e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoall</definition>
        <argsstring>(const void *send_buf, void *recv_buf, size_t count, datatype dtype, const communicator &amp;comm, const alltoall_attr &amp;attr=default_alltoall_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoall</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const alltoall_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoall_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="790" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="790" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoall_1gab507d3b7975af2eaafebf37124785828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoall</definition>
        <argsstring>(const vector_class&lt; void * &gt; &amp;send_buf, const vector_class&lt; void * &gt; &amp;recv_buf, size_t count, datatype dtype, const communicator &amp;comm, const stream &amp;stream, const alltoall_attr &amp;attr=default_alltoall_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoall</name>
        <param>
          <type>const vector_class&lt; void * &gt; &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; void * &gt; &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const alltoall_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoall_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>array of buffers with local data to be sent, one buffer per rank </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store received result, one buffer per rank </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="804" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="804" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoall_1ga14c706e631208a28105e8a792f42c8a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoall</definition>
        <argsstring>(const vector_class&lt; void * &gt; &amp;send_buf, const vector_class&lt; void * &gt; &amp;recv_buf, size_t count, datatype dtype, const communicator &amp;comm, const alltoall_attr &amp;attr=default_alltoall_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoall</name>
        <param>
          <type>const vector_class&lt; void * &gt; &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; void * &gt; &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const alltoall_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoall_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>array of buffers with local data to be sent, one buffer per rank </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store received result, one buffer per rank </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="819" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="819" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoall_1ga84a9694d58198e8cb8e8278bd9b02c8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoall</definition>
        <argsstring>(const BufferType *send_buf, BufferType *recv_buf, size_t count, const communicator &amp;comm, const stream &amp;stream, const alltoall_attr &amp;attr=default_alltoall_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoall</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const alltoall_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoall_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="834" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="834" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoall_1gad7e8c3ca2cf271501723c69f37f963ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoall</definition>
        <argsstring>(const BufferType *send_buf, BufferType *recv_buf, size_t count, const communicator &amp;comm, const alltoall_attr &amp;attr=default_alltoall_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoall</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const alltoall_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoall_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="849" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="849" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoall_1ga7239809e4da0082479162bbc52117348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoall</definition>
        <argsstring>(const vector_class&lt; BufferType * &gt; &amp;send_buf, const vector_class&lt; BufferType * &gt; &amp;recv_buf, size_t count, const communicator &amp;comm, const stream &amp;stream, const alltoall_attr &amp;attr=default_alltoall_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoall</name>
        <param>
          <type>const vector_class&lt; BufferType * &gt; &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; BufferType * &gt; &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const alltoall_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoall_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>array of buffers with local data to be sent, one buffer per rank </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store received result, one buffer per rank </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="866" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="866" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoall_1ga2d44421d3d9c7f472c88148e4f367ee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoall</definition>
        <argsstring>(const vector_class&lt; BufferType * &gt; &amp;send_buf, const vector_class&lt; BufferType * &gt; &amp;recv_buf, size_t count, const communicator &amp;comm, const alltoall_attr &amp;attr=default_alltoall_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoall</name>
        <param>
          <type>const vector_class&lt; BufferType * &gt; &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; BufferType * &gt; &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const alltoall_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoall_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>array of buffers with local data to be sent, one buffer per rank </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store received result, one buffer per rank </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="885" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="885" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoall_1gae95987275b79b4c5c39519b27bf0fd9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoall</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, BufferObjectType &amp;recv_buf, size_t count, const communicator &amp;comm, const stream &amp;stream, const alltoall_attr &amp;attr=default_alltoall_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoall</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const alltoall_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoall_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="899" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="899" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoall_1ga9d8255a51627ed9e53641d88b8b82506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoall</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, BufferObjectType &amp;recv_buf, size_t count, const communicator &amp;comm, const alltoall_attr &amp;attr=default_alltoall_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoall</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const alltoall_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoall_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>array of buffers with local data to be sent, one buffer per rank </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store received result, one buffer per rank </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="917" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="917" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoall_1gafc4eba5b6deb74f0f62c81d4699cbea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoall</definition>
        <argsstring>(const vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;send_buf, const vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;recv_buf, size_t count, const communicator &amp;comm, const stream &amp;stream, const alltoall_attr &amp;attr=default_alltoall_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoall</name>
        <param>
          <type>const vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const alltoall_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoall_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>array of buffers with local data to be sent, one buffer per rank </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store received result, one buffer per rank </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="934" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="934" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoall_1gabe8a8baf2ea7d4fdb57056e6967eb8fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoall</definition>
        <argsstring>(const vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;send_buf, const vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;recv_buf, size_t count, const communicator &amp;comm, const alltoall_attr &amp;attr=default_alltoall_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoall</name>
        <param>
          <type>const vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const alltoall_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoall_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>array of buffers with local data to be sent, one buffer per rank </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store received result, one buffer per rank </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="952" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="952" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoallv_1gacdf0659bd7652b0170904797c25d89e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoallv</definition>
        <argsstring>(const void *send_buf, const vector_class&lt; size_t &gt; &amp;send_counts, void *recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, datatype dtype, const communicator &amp;comm, const stream &amp;stream, const alltoallv_attr &amp;attr=default_alltoallv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoallv</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>send_counts</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const alltoallv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoallv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Alltoallv is a collective communication operation in which each rank sends distinct blocks of data to each rank. Block sizes may differ. The j-th block of <computeroutput>send_buf</computeroutput> sent from the i-th rank is received by the j-th rank and is placed in the i-th block of <computeroutput>recvbuf</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer with elements of <computeroutput>dtype</computeroutput> that stores local blocks to be sent to each rank </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>send_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>array of buffers to store send blocks, one buffer per rank </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer to store received result, must be large enough to hold blocks from all ranks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store receive blocks, one buffer per rank </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>send_counts</parametername>
</parameternamelist>
<parameterdescription>
<para>array with the number of elements of type <computeroutput>dtype</computeroutput> in send blocks for each rank </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_counts</parametername>
</parameternamelist>
<parameterdescription>
<para>array with the number of elements of type <computeroutput>dtype</computeroutput> in receive blocks from each rank </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the datatype of elements in <computeroutput>send_buf</computeroutput> and <computeroutput>recv_buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communicator for which the operation will be performed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>abstraction over a device queue constructed via ccl::create_stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional attributes to customize operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deps</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional vector of the events that the operation should depend on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ccl::event an object to track the progress of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="983" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="983" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoallv_1ga1a922ee6a7a89e71fbfc5c93c8dd0caa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoallv</definition>
        <argsstring>(const void *send_buf, const vector_class&lt; size_t &gt; &amp;send_counts, void *recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, datatype dtype, const communicator &amp;comm, const alltoallv_attr &amp;attr=default_alltoallv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoallv</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>send_counts</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const alltoallv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoallv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="996" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="996" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoallv_1gad62ab2a10cba6392dfdde535b878ae02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoallv</definition>
        <argsstring>(const vector_class&lt; void * &gt; &amp;send_bufs, const vector_class&lt; size_t &gt; &amp;send_counts, const vector_class&lt; void * &gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, datatype dtype, const communicator &amp;comm, const stream &amp;stream, const alltoallv_attr &amp;attr=default_alltoallv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoallv</name>
        <param>
          <type>const vector_class&lt; void * &gt; &amp;</type>
          <declname>send_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>send_counts</declname>
        </param>
        <param>
          <type>const vector_class&lt; void * &gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const alltoallv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoallv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1011" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1011" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoallv_1gab3f32cce6f7fd2a706da4fb2f70f118e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoallv</definition>
        <argsstring>(const vector_class&lt; void * &gt; &amp;send_bufs, const vector_class&lt; size_t &gt; &amp;send_counts, const vector_class&lt; void * &gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, datatype dtype, const communicator &amp;comm, const alltoallv_attr &amp;attr=default_alltoallv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoallv</name>
        <param>
          <type>const vector_class&lt; void * &gt; &amp;</type>
          <declname>send_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>send_counts</declname>
        </param>
        <param>
          <type>const vector_class&lt; void * &gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const alltoallv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoallv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1027" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1027" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoallv_1ga3496e8dd2680abd824e82e963ab460e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoallv</definition>
        <argsstring>(const BufferType *send_buf, const vector_class&lt; size_t &gt; &amp;send_counts, BufferType *recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const stream &amp;stream, const alltoallv_attr &amp;attr=default_alltoallv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoallv</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>send_counts</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const alltoallv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoallv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1044" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1044" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoallv_1ga9ea1109da99e680dc2f6094a790b860a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoallv</definition>
        <argsstring>(const BufferType *send_buf, const vector_class&lt; size_t &gt; &amp;send_counts, BufferType *recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const alltoallv_attr &amp;attr=default_alltoallv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoallv</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>send_counts</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const alltoallv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoallv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1061" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1061" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoallv_1gab5e1391c6e274c21c4192c05cd2039a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoallv</definition>
        <argsstring>(const vector_class&lt; BufferType * &gt; &amp;send_bufs, const vector_class&lt; size_t &gt; &amp;send_counts, const vector_class&lt; BufferType * &gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const stream &amp;stream, const alltoallv_attr &amp;attr=default_alltoallv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoallv</name>
        <param>
          <type>const vector_class&lt; BufferType * &gt; &amp;</type>
          <declname>send_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>send_counts</declname>
        </param>
        <param>
          <type>const vector_class&lt; BufferType * &gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const alltoallv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoallv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1077" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1077" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoallv_1gaaef203af470a15005c5b57284d30c410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoallv</definition>
        <argsstring>(const vector_class&lt; BufferType * &gt; &amp;send_bufs, const vector_class&lt; size_t &gt; &amp;send_counts, const vector_class&lt; BufferType * &gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const alltoallv_attr &amp;attr=default_alltoallv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoallv</name>
        <param>
          <type>const vector_class&lt; BufferType * &gt; &amp;</type>
          <declname>send_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>send_counts</declname>
        </param>
        <param>
          <type>const vector_class&lt; BufferType * &gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const alltoallv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoallv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1094" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1094" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoallv_1ga5984a0ce6a9fb093e18bc4b2849b800a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoallv</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, const vector_class&lt; size_t &gt; &amp;send_counts, BufferObjectType &amp;recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const stream &amp;stream, const alltoallv_attr &amp;attr=default_alltoallv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoallv</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>send_counts</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const alltoallv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoallv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1110" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1110" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoallv_1gacb0dbe760a24960c6b9a39ebe4cceebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoallv</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, const vector_class&lt; size_t &gt; &amp;send_counts, BufferObjectType &amp;recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const alltoallv_attr &amp;attr=default_alltoallv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoallv</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>send_counts</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const alltoallv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoallv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1127" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1127" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoallv_1ga04ddd6d73cbf4173a2837973ccc2e85f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoallv</definition>
        <argsstring>(const vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;send_bufs, const vector_class&lt; size_t &gt; &amp;send_counts, const vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const stream &amp;stream, const alltoallv_attr &amp;attr=default_alltoallv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoallv</name>
        <param>
          <type>const vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;</type>
          <declname>send_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>send_counts</declname>
        </param>
        <param>
          <type>const vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const alltoallv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoallv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1143" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1143" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__alltoallv_1ga40d54154f163611ee16fda490ccf9118" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::alltoallv</definition>
        <argsstring>(const vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;send_bufs, const vector_class&lt; size_t &gt; &amp;send_counts, const vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const alltoallv_attr &amp;attr=default_alltoallv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>alltoallv</name>
        <param>
          <type>const vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;</type>
          <declname>send_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>send_counts</declname>
        </param>
        <param>
          <type>const vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const alltoallv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_alltoallv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1160" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1160" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__barrier_1ga82b3ed2e0f5f81747a5192ca9f0ee056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::barrier</definition>
        <argsstring>(const communicator &amp;comm, const stream &amp;stream, const barrier_attr &amp;attr=default_barrier_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>barrier</name>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const barrier_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_barrier_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Barrier synchronization is performed across all ranks of the communicator and it is completed only after all the ranks in the communicator have called it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communicator for which the operation will be performed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>abstraction over a device queue constructed via ccl::create_stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional attributes to customize operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deps</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional vector of the events that the operation should depend on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ccl::event an object to track the progress of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1185" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1185" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__barrier_1gaeccb4eeb980d31958649df5eb316c78b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::barrier</definition>
        <argsstring>(const communicator &amp;comm, const barrier_attr &amp;attr=default_barrier_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>barrier</name>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const barrier_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_barrier_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1193" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1193" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__broadcast_1gaf0ff0ab5ccbf9e60ee16608152a120a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcast</definition>
        <argsstring>(void *buf, size_t count, datatype dtype, int root, const communicator &amp;comm, const stream &amp;stream, const broadcast_attr &amp;attr=default_broadcast_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcast</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const broadcast_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcast_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Broadcast is a collective communication operation that broadcasts data from one rank of communicator (denoted as root) to all other ranks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] the buffer with <computeroutput>count</computeroutput> elements of <computeroutput>dtype</computeroutput> serves as send buffer for root </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer with <computeroutput>count</computeroutput> elements of <computeroutput>dtype</computeroutput> serves as receive buffer for all ranks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements of type <computeroutput>dtype</computeroutput> in <computeroutput>buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the datatype of elements in <computeroutput>buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>the rank that broadcasts <computeroutput>buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communicator for which the operation will be performed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>abstraction over a device queue constructed via ccl::create_stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional attributes to customize operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deps</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional vector of the events that the operation should depend on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ccl::event an object to track the progress of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1220" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1220" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__broadcast_1gae1797a842e44d0695f8ee71a8258e7f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcast</definition>
        <argsstring>(void *buf, size_t count, datatype dtype, int root, const communicator &amp;comm, const broadcast_attr &amp;attr=default_broadcast_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcast</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const broadcast_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcast_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1232" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1232" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__broadcast_1gabe5f9e089a859f4fbb521af22334c6a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcast</definition>
        <argsstring>(BufferType *buf, size_t count, int root, const communicator &amp;comm, const stream &amp;stream, const broadcast_attr &amp;attr=default_broadcast_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcast</name>
        <param>
          <type>BufferType *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const broadcast_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcast_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1248" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1248" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__broadcast_1gad03e6a60065489ab91a2474dad5ca51d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcast</definition>
        <argsstring>(BufferType *buf, size_t count, int root, const communicator &amp;comm, const broadcast_attr &amp;attr=default_broadcast_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcast</name>
        <param>
          <type>BufferType *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const broadcast_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcast_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1264" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1264" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__broadcast_1gaf1b3a9e7440d50f245aa094f218cd6af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcast</definition>
        <argsstring>(BufferObjectType &amp;buf, size_t count, int root, const communicator &amp;comm, const stream &amp;stream, const broadcast_attr &amp;attr=default_broadcast_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcast</name>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const broadcast_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcast_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1279" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1279" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__broadcast_1ga0743dbdbe807817b1d213f28c8ae0b76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcast</definition>
        <argsstring>(BufferObjectType &amp;buf, size_t count, int root, const communicator &amp;comm, const broadcast_attr &amp;attr=default_broadcast_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcast</name>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const broadcast_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcast_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1295" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1295" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__broadcast_ext_1ga486ce8182f29db9c1a568c42be13460a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcastExt</definition>
        <argsstring>(void *send_buf, void *recv_buf, size_t count, datatype dtype, int root, const communicator &amp;comm, const stream &amp;stream, const broadcastExt_attr &amp;attr=default_broadcastExt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcastExt</name>
        <param>
          <type>void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const broadcastExt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcastExt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>broadcastExt is a collective communication operation that broadcastExts data from one rank of communicator (denoted as root) to all other ranks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] the buffer with <computeroutput>count</computeroutput> elements of <computeroutput>dtype</computeroutput> serves as send buffer for root </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer with <computeroutput>count</computeroutput> elements of <computeroutput>dtype</computeroutput> serves as receive buffer for all ranks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements of type <computeroutput>dtype</computeroutput> in <computeroutput>send_buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the datatype of elements in <computeroutput>send_buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>the rank that broadcastExts <computeroutput>send_buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communicator for which the operation will be performed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>abstraction over a device queue constructed via ccl::create_stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional attributes to customize operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deps</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional vector of the events that the operation should depend on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ccl::event an object to track the progress of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1325" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1325" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__broadcast_ext_1ga7d1942483562b4f203628b912ec93400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcastExt</definition>
        <argsstring>(void *send_buf, void *recv_buf, size_t count, datatype dtype, int root, const communicator &amp;comm, const broadcastExt_attr &amp;attr=default_broadcastExt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcastExt</name>
        <param>
          <type>void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const broadcastExt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcastExt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1338" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1338" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__broadcast_ext_1ga8f0d4e347dd045a8672f7687c0a97c24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcastExt</definition>
        <argsstring>(BufferType *send_buf, BufferType *recv_buf, size_t count, int root, const communicator &amp;comm, const stream &amp;stream, const broadcastExt_attr &amp;attr=default_broadcastExt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcastExt</name>
        <param>
          <type>BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const broadcastExt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcastExt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1355" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1355" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__broadcast_ext_1ga4d4de1a8c29424ade9170b10d0da3717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcastExt</definition>
        <argsstring>(BufferType *send_buf, BufferType *recv_buf, size_t count, int root, const communicator &amp;comm, const broadcastExt_attr &amp;attr=default_broadcastExt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcastExt</name>
        <param>
          <type>BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const broadcastExt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcastExt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1372" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1372" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__broadcast_ext_1ga506beb600336a559928fc15b038717ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcastExt</definition>
        <argsstring>(BufferObjectType &amp;send_buf, BufferObjectType &amp;recv_buf, size_t count, int root, const communicator &amp;comm, const stream &amp;stream, const broadcastExt_attr &amp;attr=default_broadcastExt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcastExt</name>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const broadcastExt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcastExt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1388" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1388" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__broadcast_ext_1gafb9c0fdf60485166e7f88f4116a8b7d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcastExt</definition>
        <argsstring>(BufferObjectType &amp;send_buf, BufferObjectType &amp;recv_buf, size_t count, int root, const communicator &amp;comm, const broadcastExt_attr &amp;attr=default_broadcastExt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcastExt</name>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const broadcastExt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcastExt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1405" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1405" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__recv_1ga0eaead47def2b0413c463bc26da2de76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::recv</definition>
        <argsstring>(void *buf, size_t count, datatype dtype, int peer, const communicator &amp;comm, const stream &amp;stream, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>recv</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Recv is a pt2pt communication operation that receives data from one rank of communicator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[in,out] the buffer with <computeroutput>count</computeroutput> elements of <computeroutput>dtype</computeroutput> serves as send buffer for root and as receive buffer for other ranks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements of type <computeroutput>dtype</computeroutput> in <computeroutput>buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the datatype of elements in <computeroutput>buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>peer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rank that sends <computeroutput>buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communicator for which the operation will be performed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>abstraction over a device queue constructed via ccl::create_stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional attributes to customize operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deps</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional vector of the events that the operation should depend on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ccl::event an object to track the progress of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1434" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1434" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__recv_1gacfb0164d3935e9296091b6735ea6b46d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::recv</definition>
        <argsstring>(void *buf, size_t count, datatype dtype, int peer, const communicator &amp;comm, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>recv</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1446" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1446" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__recv_1ga5f58037e54c56ad955a176565ae83a6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::recv</definition>
        <argsstring>(BufferType *buf, size_t count, int peer, const communicator &amp;comm, const stream &amp;stream, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>recv</name>
        <param>
          <type>BufferType *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1462" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1462" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__recv_1gac5c9d4921862541fc04b1953cd51f97e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::recv</definition>
        <argsstring>(BufferType *buf, size_t count, int peer, const communicator &amp;comm, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>recv</name>
        <param>
          <type>BufferType *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1478" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1478" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__recv_1ga47aacac32fbfde053c18d5fb81dadd41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::recv</definition>
        <argsstring>(BufferObjectType &amp;buf, size_t count, int peer, const communicator &amp;comm, const stream &amp;stream, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>recv</name>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1493" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1493" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__recv_1ga55fd087c18b846e37c6739562fde2901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::recv</definition>
        <argsstring>(BufferObjectType &amp;buf, size_t count, int peer, const communicator &amp;comm, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>recv</name>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1508" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1508" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__send_1ga844a7f2552b6eeb12d0801441659ba67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::send</definition>
        <argsstring>(void *buf, size_t count, datatype dtype, int peer, const communicator &amp;comm, const stream &amp;stream, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>send</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Send is a pt2pt communication operation that sends data from one rank of communicator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[in,out] the buffer with <computeroutput>count</computeroutput> elements of <computeroutput>dtype</computeroutput> serves as send buffer for root and as receive buffer for other ranks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements of type <computeroutput>dtype</computeroutput> in <computeroutput>buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the datatype of elements in <computeroutput>buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>peer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rank that receives <computeroutput>buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communicator for which the operation will be performed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>abstraction over a device queue constructed via ccl::create_stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional attributes to customize operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deps</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional vector of the events that the operation should depend on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ccl::event an object to track the progress of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1536" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1536" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__send_1gad1c8fc9b32b65d1b174944c85f59960a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::send</definition>
        <argsstring>(void *buf, size_t count, datatype dtype, int peer, const communicator &amp;comm, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>send</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1548" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1548" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__send_1gadbbb63d71a4411b8515a39ea4d57a145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::send</definition>
        <argsstring>(BufferType *buf, size_t count, int peer, const communicator &amp;comm, const stream &amp;stream, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>send</name>
        <param>
          <type>BufferType *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1564" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1564" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__send_1ga5b4b408e853abd75e1e0e68b42f3ec44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::send</definition>
        <argsstring>(BufferType *buf, size_t count, int peer, const communicator &amp;comm, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>send</name>
        <param>
          <type>BufferType *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1580" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1580" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__send_1ga9dc152cf8fa4ea60fa6e07d497d4093b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::send</definition>
        <argsstring>(BufferObjectType &amp;buf, size_t count, int peer, const communicator &amp;comm, const stream &amp;stream, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>send</name>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1595" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1595" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__send_1ga1b30ee9a66a1797227312ee2c448e7c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::send</definition>
        <argsstring>(BufferObjectType &amp;buf, size_t count, int peer, const communicator &amp;comm, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>send</name>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1611" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1611" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__reduce_1gad45363abcf76aa241dbc2113ff21809a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::reduce</definition>
        <argsstring>(const void *send_buf, void *recv_buf, size_t count, datatype dtype, reduction rtype, int root, const communicator &amp;comm, const stream &amp;stream, const reduce_attr &amp;attr=default_reduce_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>reduce</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const reduce_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_reduce_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Reduce is a collective communication operation that performs the global reduction operation on values from all ranks of the communicator and returns the result to the root rank. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer with <computeroutput>count</computeroutput> elements of <computeroutput>dtype</computeroutput> that stores local data to be reduced </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer to store reduced result, must have the same dimension as <computeroutput>send_buf</computeroutput>. Used by the <computeroutput>root</computeroutput> rank only, ignored by other ranks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements of type <computeroutput>dtype</computeroutput> in <computeroutput>send_buf</computeroutput> and <computeroutput>recv_buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the datatype of elements in <computeroutput>send_buf</computeroutput> and <computeroutput>recv_buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the reduction operation to be applied </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>the rank that gets the result of reduction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communicator for which the operation will be performed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>abstraction over a device queue constructed via ccl::create_stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional attributes to customize operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deps</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional vector of the events that the operation should depend on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ccl::event an object to track the progress of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1641" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1641" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__reduce_1ga9935feeb0258a2fee02d193091fb6608" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::reduce</definition>
        <argsstring>(const void *send_buf, void *recv_buf, size_t count, datatype dtype, reduction rtype, int root, const communicator &amp;comm, const reduce_attr &amp;attr=default_reduce_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>reduce</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const reduce_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_reduce_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1655" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1655" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__reduce_1ga08b0eaf46e45fe8bf10c2198eaa4c761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::reduce</definition>
        <argsstring>(const BufferType *send_buf, BufferType *recv_buf, size_t count, reduction rtype, int root, const communicator &amp;comm, const stream &amp;stream, const reduce_attr &amp;attr=default_reduce_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>reduce</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const reduce_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_reduce_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1673" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1673" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__reduce_1ga2d01a7c9e1bd65e0fca004f6f33652ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::reduce</definition>
        <argsstring>(const BufferType *send_buf, BufferType *recv_buf, size_t count, reduction rtype, int root, const communicator &amp;comm, const reduce_attr &amp;attr=default_reduce_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>reduce</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const reduce_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_reduce_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1691" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1691" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__reduce_1ga676e38ec1eeeeb3b516cc8158975f07d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::reduce</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, BufferObjectType &amp;recv_buf, size_t count, reduction rtype, int root, const communicator &amp;comm, const stream &amp;stream, const reduce_attr &amp;attr=default_reduce_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>reduce</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const reduce_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_reduce_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1708" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1708" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__reduce_1gac899ad8b9c0a5882a13d7888366c0141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::reduce</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, BufferObjectType &amp;recv_buf, size_t count, reduction rtype, int root, const communicator &amp;comm, const reduce_attr &amp;attr=default_reduce_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>reduce</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const reduce_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_reduce_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1726" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1726" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__reducescatter_1ga4e5f79a1b424aba43b213cd2e7eb975e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::reduce_scatter</definition>
        <argsstring>(const void *send_buf, void *recv_buf, size_t recv_count, datatype dtype, reduction rtype, const communicator &amp;comm, const stream &amp;stream, const reduce_scatter_attr &amp;attr=default_reduce_scatter_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>reduce_scatter</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>recv_count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const reduce_scatter_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_reduce_scatter_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Reduce-scatter is a collective communication operation that performs the global reduction operation on values from all ranks of the communicator and scatters the result in blocks back to all ranks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer with <computeroutput>comm_size</computeroutput> * <computeroutput>count</computeroutput> elements of <computeroutput>dtype</computeroutput> that stores local data to be reduced </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer to store result block containing <computeroutput>recv_count</computeroutput> elements of type <computeroutput>dtype</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements of type <computeroutput>dtype</computeroutput> in receive block </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the datatype of elements in <computeroutput>send_buf</computeroutput> and <computeroutput>recv_buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the reduction operation to be applied </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communicator for which the operation will be performed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>abstraction over a device queue constructed via ccl::create_stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional attributes to customize operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deps</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional vector of the events that the operation should depend on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ccl::event an object to track the progress of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1756" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1756" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__reducescatter_1ga76628f5b059f2b545847a6dcbd092e04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::reduce_scatter</definition>
        <argsstring>(const void *send_buf, void *recv_buf, size_t recv_count, datatype dtype, reduction rtype, const communicator &amp;comm, const reduce_scatter_attr &amp;attr=default_reduce_scatter_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>reduce_scatter</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>recv_count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const reduce_scatter_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_reduce_scatter_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1769" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1769" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__reducescatter_1gaa74f31a03a95bc7d5c27348262368528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::reduce_scatter</definition>
        <argsstring>(const BufferType *send_buf, BufferType *recv_buf, size_t recv_count, reduction rtype, const communicator &amp;comm, const stream &amp;stream, const reduce_scatter_attr &amp;attr=default_reduce_scatter_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>reduce_scatter</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>recv_count</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const reduce_scatter_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_reduce_scatter_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1786" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1786" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__reducescatter_1ga62e85fc75bab9db82bad47b5fc183428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::reduce_scatter</definition>
        <argsstring>(const BufferType *send_buf, BufferType *recv_buf, size_t recv_count, reduction rtype, const communicator &amp;comm, const reduce_scatter_attr &amp;attr=default_reduce_scatter_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>reduce_scatter</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>recv_count</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const reduce_scatter_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_reduce_scatter_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1803" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1803" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__reducescatter_1gab5911198a87b7b73e6265557fb1edb0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::reduce_scatter</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, BufferObjectType &amp;recv_buf, size_t recv_count, reduction rtype, const communicator &amp;comm, const stream &amp;stream, const reduce_scatter_attr &amp;attr=default_reduce_scatter_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>reduce_scatter</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>recv_count</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const reduce_scatter_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_reduce_scatter_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1820" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1820" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__reducescatter_1ga7c074109f79ed5a458ee62ba7fa4ad60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::reduce_scatter</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, BufferObjectType &amp;recv_buf, size_t recv_count, reduction rtype, const communicator &amp;comm, const reduce_scatter_attr &amp;attr=default_reduce_scatter_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>reduce_scatter</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>recv_count</declname>
        </param>
        <param>
          <type>reduction</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const reduce_scatter_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_reduce_scatter_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1837" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1837" declcolumn="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/oneapi/ccl/api_functions.hpp" line="9" column="1"/>
  </compounddef>
</doxygen>
