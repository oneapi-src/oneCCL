<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__allgatherv" kind="group">
    <compoundname>allgatherv</compoundname>
    <title>Allgatherv</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__allgatherv_1gadc867b06e814abffb0b7f724106b5c3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const void *send_buf, size_t send_count, void *recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, datatype dtype, const communicator &amp;comm, const stream &amp;stream, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Allgatherv is a collective communication operation that collects data from all the ranks within a communicator into a single buffer. Different ranks may contribute segments of different sizes. The resulting data in the output buffer is the same for each rank.</para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer with <computeroutput>send_count</computeroutput> elements of <computeroutput>dtype</computeroutput> that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>send_count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements of type <computeroutput>dtype</computeroutput> in <computeroutput>send_buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer to store gathered result of <computeroutput>dtype</computeroutput>, must be large enough to hold values from all ranks, i.e. size should be equal to <computeroutput>dtype</computeroutput> size in bytes * sum of all values in <computeroutput>recv_counts</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_counts</parametername>
</parameternamelist>
<parameterdescription>
<para>array with the number of elements of type <computeroutput>dtype</computeroutput> to be received from each rank </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the datatype of elements in <computeroutput>send_buf</computeroutput> and <computeroutput>recv_buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communicator for which the operation will be performed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>abstraction over a device queue constructed via ccl::create_stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional attributes to customize operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deps</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional vector of the events that the operation should depend on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ccl::event an object to track the progress of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="430" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="430" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1gab62b8e5c2ca4c20b7ae1b5a1cc526186" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const void *send_buf, size_t send_count, void *recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, datatype dtype, const communicator &amp;comm, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="443" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="443" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1ga49c8770a2f8057895a3bcdf9be9c15b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const void *send_buf, size_t send_count, const vector_class&lt; void * &gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, datatype dtype, const communicator &amp;comm, const stream &amp;stream, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>const vector_class&lt; void * &gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>This overloaded function takes separate receive buffer per rank.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store gathered result, one buffer per rank; each buffer must be large enough to keep the corresponding <computeroutput>recv_counts</computeroutput> elements of <computeroutput>dtype</computeroutput> size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="460" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="460" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1gad3da0ea3b7a6d9dde3b71318e09f4041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const void *send_buf, size_t send_count, const vector_class&lt; void * &gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, datatype dtype, const communicator &amp;comm, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>const vector_class&lt; void * &gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>This overloaded function takes separate receive buffer per rank.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store gathered result, one buffer per rank; each buffer must be large enough to keep the corresponding <computeroutput>recv_counts</computeroutput> elements of <computeroutput>dtype</computeroutput> size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="478" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="478" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1ga161e5ea2906c9377c74bc46d38c91546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const BufferType *send_buf, size_t send_count, BufferType *recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const stream &amp;stream, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer with <computeroutput>send_count</computeroutput> elements of <computeroutput>BufferType</computeroutput> that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer to store gathered result of <computeroutput>BufferType</computeroutput>, must be large enough to hold values from all ranks, i.e. size should be equal to <computeroutput>BufferType</computeroutput> size in bytes * sum of all values in <computeroutput>recv_counts</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="499" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="499" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1gabab76bb2e8d6e0223dfad7be25fb1f03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const BufferType *send_buf, size_t send_count, BufferType *recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer with <computeroutput>send_count</computeroutput> elements of <computeroutput>BufferType</computeroutput> that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer to store gathered result of <computeroutput>BufferType</computeroutput>, must be large enough to hold values from all ranks, i.e. size should be equal to <computeroutput>BufferType</computeroutput> size in bytes * sum of all values in <computeroutput>recv_counts</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="520" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="520" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1ga9c48e02cf5155fcb8eba48973ab8e0e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const BufferType *send_buf, size_t send_count, vector_class&lt; BufferType * &gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const stream &amp;stream, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>vector_class&lt; BufferType * &gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer with <computeroutput>send_count</computeroutput> elements of <computeroutput>BufferType</computeroutput> that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store gathered result, one buffer per rank; each buffer must be large enough to keep the corresponding <computeroutput>recv_counts</computeroutput> elements of <computeroutput>BufferType</computeroutput> size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="539" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="539" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1gaec28ac8b12dee4bedc4e1c06b6addc58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const BufferType *send_buf, size_t send_count, vector_class&lt; BufferType * &gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>vector_class&lt; BufferType * &gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer with <computeroutput>send_count</computeroutput> elements of <computeroutput>BufferType</computeroutput> that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store gathered result, one buffer per rank; each buffer must be large enough to keep the corresponding <computeroutput>recv_counts</computeroutput> elements of <computeroutput>BufferType</computeroutput> size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="559" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="559" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1gab64b8d34a738b402de32c0712551d1de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, size_t send_count, BufferObjectType &amp;recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const stream &amp;stream, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer of <computeroutput>BufferObjectType</computeroutput> with <computeroutput>send_count</computeroutput> elements that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer of <computeroutput>BufferObjectType</computeroutput> to store gathered result, must be large enough to hold values from all ranks, i.e. size should be equal to <computeroutput>BufferType</computeroutput> size in bytes * sum of all values in <computeroutput>recv_counts</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="579" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="579" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1ga20b9ece4ceccb4d05debcbcdf589536f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, size_t send_count, BufferObjectType &amp;recv_buf, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer of <computeroutput>BufferObjectType</computeroutput> with <computeroutput>send_count</computeroutput> elements that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer of <computeroutput>BufferObjectType</computeroutput> to store gathered result, must be large enough to hold values from all ranks, i.e. size should be equal to <computeroutput>BufferType</computeroutput> size in bytes * sum of all values in <computeroutput>recv_counts</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="600" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="600" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1ga4a872d1d394952a6d64eb70cbf3b48fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, size_t send_count, vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const stream &amp;stream, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer of <computeroutput>BufferObjectType</computeroutput> with <computeroutput>send_count</computeroutput> elements that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store gathered result, one buffer per rank; each buffer must be large enough to keep the corresponding <computeroutput>recv_counts</computeroutput> elements of <computeroutput>BufferObjectType</computeroutput> size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="619" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="619" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__allgatherv_1ga4ca37a5e3180060bd9421aef1bb9e57b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::allgatherv</definition>
        <argsstring>(const BufferObjectType &amp;send_buf, size_t send_count, vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;recv_bufs, const vector_class&lt; size_t &gt; &amp;recv_counts, const communicator &amp;comm, const allgatherv_attr &amp;attr=default_allgatherv_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>allgatherv</name>
        <param>
          <type>const BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>send_count</declname>
        </param>
        <param>
          <type>vector_class&lt; reference_wrapper_class&lt; BufferObjectType &gt;&gt; &amp;</type>
          <declname>recv_bufs</declname>
        </param>
        <param>
          <type>const vector_class&lt; size_t &gt; &amp;</type>
          <declname>recv_counts</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const allgatherv_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_allgatherv_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer of <computeroutput>BufferObjectType</computeroutput> with <computeroutput>send_count</computeroutput> elements that stores local data to be gathered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] array of buffers to store gathered result, one buffer per rank; each buffer must be large enough to keep the corresponding <computeroutput>recv_counts</computeroutput> elements of <computeroutput>BufferObjectType</computeroutput> size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="639" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="639" declcolumn="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
