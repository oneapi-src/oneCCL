<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__recv" kind="group">
    <compoundname>recv</compoundname>
    <title>Recv</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__recv_1ga0eaead47def2b0413c463bc26da2de76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::recv</definition>
        <argsstring>(void *buf, size_t count, datatype dtype, int peer, const communicator &amp;comm, const stream &amp;stream, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>recv</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Recv is a pt2pt communication operation that receives data from one rank of communicator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[in,out] the buffer with <computeroutput>count</computeroutput> elements of <computeroutput>dtype</computeroutput> serves as send buffer for root and as receive buffer for other ranks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements of type <computeroutput>dtype</computeroutput> in <computeroutput>buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the datatype of elements in <computeroutput>buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>peer</parametername>
</parameternamelist>
<parameterdescription>
<para>the rank that sends <computeroutput>buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communicator for which the operation will be performed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>abstraction over a device queue constructed via ccl::create_stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional attributes to customize operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deps</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional vector of the events that the operation should depend on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ccl::event an object to track the progress of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1434" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1434" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__recv_1gacfb0164d3935e9296091b6735ea6b46d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::recv</definition>
        <argsstring>(void *buf, size_t count, datatype dtype, int peer, const communicator &amp;comm, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>recv</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1446" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1446" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__recv_1ga5f58037e54c56ad955a176565ae83a6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::recv</definition>
        <argsstring>(BufferType *buf, size_t count, int peer, const communicator &amp;comm, const stream &amp;stream, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>recv</name>
        <param>
          <type>BufferType *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1462" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1462" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__recv_1gac5c9d4921862541fc04b1953cd51f97e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::recv</definition>
        <argsstring>(BufferType *buf, size_t count, int peer, const communicator &amp;comm, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>recv</name>
        <param>
          <type>BufferType *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1478" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1478" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__recv_1ga47aacac32fbfde053c18d5fb81dadd41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::recv</definition>
        <argsstring>(BufferObjectType &amp;buf, size_t count, int peer, const communicator &amp;comm, const stream &amp;stream, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>recv</name>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1493" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1493" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__recv_1ga55fd087c18b846e37c6739562fde2901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::recv</definition>
        <argsstring>(BufferObjectType &amp;buf, size_t count, int peer, const communicator &amp;comm, const pt2pt_attr &amp;attr=default_pt2pt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>recv</name>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const pt2pt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_pt2pt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1508" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1508" declcolumn="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
