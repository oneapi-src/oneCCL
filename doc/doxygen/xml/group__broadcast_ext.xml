<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__broadcast_ext" kind="group">
    <compoundname>broadcastExt</compoundname>
    <title>BroadcastExt</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__broadcast_ext_1ga486ce8182f29db9c1a568c42be13460a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcastExt</definition>
        <argsstring>(void *send_buf, void *recv_buf, size_t count, datatype dtype, int root, const communicator &amp;comm, const stream &amp;stream, const broadcastExt_attr &amp;attr=default_broadcastExt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcastExt</name>
        <param>
          <type>void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const broadcastExt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcastExt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>broadcastExt is a collective communication operation that broadcastExts data from one rank of communicator (denoted as root) to all other ranks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] the buffer with <computeroutput>count</computeroutput> elements of <computeroutput>dtype</computeroutput> serves as send buffer for root </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] the buffer with <computeroutput>count</computeroutput> elements of <computeroutput>dtype</computeroutput> serves as receive buffer for all ranks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements of type <computeroutput>dtype</computeroutput> in <computeroutput>send_buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the datatype of elements in <computeroutput>send_buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>the rank that broadcastExts <computeroutput>send_buf</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communicator for which the operation will be performed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>abstraction over a device queue constructed via ccl::create_stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional attributes to customize operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deps</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional vector of the events that the operation should depend on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ccl::event an object to track the progress of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1325" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1325" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__broadcast_ext_1ga7d1942483562b4f203628b912ec93400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcastExt</definition>
        <argsstring>(void *send_buf, void *recv_buf, size_t count, datatype dtype, int root, const communicator &amp;comm, const broadcastExt_attr &amp;attr=default_broadcastExt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcastExt</name>
        <param>
          <type>void *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>datatype</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const broadcastExt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcastExt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1338" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1338" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__broadcast_ext_1ga8f0d4e347dd045a8672f7687c0a97c24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcastExt</definition>
        <argsstring>(BufferType *send_buf, BufferType *recv_buf, size_t count, int root, const communicator &amp;comm, const stream &amp;stream, const broadcastExt_attr &amp;attr=default_broadcastExt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcastExt</name>
        <param>
          <type>BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const broadcastExt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcastExt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1355" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1355" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__broadcast_ext_1ga4d4de1a8c29424ade9170b10d0da3717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_native_type_supported&lt;BufferType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcastExt</definition>
        <argsstring>(BufferType *send_buf, BufferType *recv_buf, size_t count, int root, const communicator &amp;comm, const broadcastExt_attr &amp;attr=default_broadcastExt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcastExt</name>
        <param>
          <type>BufferType *</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferType *</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const broadcastExt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcastExt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1372" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1372" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__broadcast_ext_1ga506beb600336a559928fc15b038717ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcastExt</definition>
        <argsstring>(BufferObjectType &amp;send_buf, BufferObjectType &amp;recv_buf, size_t count, int root, const communicator &amp;comm, const stream &amp;stream, const broadcastExt_attr &amp;attr=default_broadcastExt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcastExt</name>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const stream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const broadcastExt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcastExt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1388" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1388" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__broadcast_ext_1gafb9c0fdf60485166e7f88f4116a8b7d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BufferObjectType</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;is_class_supported&lt;BufferObjectType&gt;(), event&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>event CCL_API</type>
        <definition>event CCL_API ccl::v1::broadcastExt</definition>
        <argsstring>(BufferObjectType &amp;send_buf, BufferObjectType &amp;recv_buf, size_t count, int root, const communicator &amp;comm, const broadcastExt_attr &amp;attr=default_broadcastExt_attr, const vector_class&lt; event &gt; &amp;deps={})</argsstring>
        <name>broadcastExt</name>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>send_buf</declname>
        </param>
        <param>
          <type>BufferObjectType &amp;</type>
          <declname>recv_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const communicator &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const broadcastExt_attr &amp;</type>
          <declname>attr</declname>
          <defval>default_broadcastExt_attr</defval>
        </param>
        <param>
          <type>const vector_class&lt; event &gt; &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Type-safe version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/oneapi/ccl/api_functions.hpp" line="1405" column="15" declfile="include/oneapi/ccl/api_functions.hpp" declline="1405" declcolumn="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
